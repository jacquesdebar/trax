{"version":3,"sources":["config.js","hash.js","NewRow.js","App.js","serviceWorker.js","index.js"],"names":["scopes","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","NewRow","props","_useState","useState","_useState2","Object","slicedToArray","popularity","setPopularity","useEffect","fetch","concat","artists","id","headers","Authorization","token","then","response","json","react_default","a","createElement","name","album_type","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","album","images","url","duration_ms","is_playing","progress_ms","newReleases","items","href","offset","total","recents","track","explicit","played_at","topArtists","genre","limit","topTracks","getCurrentlyPlaying","bind","assertThisInitialized","getRecentlyPlayed","getMostPlayedArtists","getNewReleases","getMostPlayedTracks","_token","access_token","setState","_this2","$","type","beforeSend","xhr","setRequestHeader","success","data","_this3","albums","_this4","_this5","_this6","_this7","console","log","sortByType","array","r","singles","compilations","i","length","push","userTopArtists","className","map","key","src","alt","style","paddingTop","width","src_NewRow","marginLeft","marginRight","height","join","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d7c06179.chunk.js","sourcesContent":["export const authEndpoint = 'https://accounts.spotify.com/authorize'\n\n// Replace with your app's client ID, redirect URI and desired scopes\nexport const clientId = 'd5f22ea76578426aa53c0e54cd4bbff7'\nexport const redirectUri = 'http://localhost:3000/redirect'\nexport const scopes = [\n  'user-top-read',\n  'user-read-currently-playing',\n  'user-read-playback-state'\n]\n","// Get the hash of the url\nconst hash = window.location.hash\n  .substring(1)\n  .split('&')\n  .reduce(function (initial, item) {\n    if (item) {\n      var parts = item.split('=')\n      initial[parts[0]] = decodeURIComponent(parts[1])\n    }\n    return initial\n  }, {})\nwindow.location.hash = ''\n\nexport default hash\n","import React, { useEffect, useState } from 'react'\n\nconst NewRow = props => {\n  const [popularity, setPopularity] = useState(0);\n\n  useEffect(() => {\n    fetch(`https://api.spotify.com/v1/artists/${props.item.artists[0].id}`, {\n      headers: {\n        Authorization: `Bearer ${props.token}`\n      }\n    })\n      .then(response => response.json())\n      .then(popularity => setPopularity(popularity.popularity))\n  })\n\n  return (\n    <tr>\n      <td>{props.item.artists[0].name}</td>\n      <td>{props.item.name}</td>\n      <td>{props.item.album_type}</td>\n      <td>{popularity}</td>\n    </tr>\n  )\n\n}\n\nexport default NewRow;","// eslint-disable-next-line no-unused-vars\nimport React, { Component } from 'react'\nimport * as $ from 'jquery'\nimport { authEndpoint, clientId, redirectUri, scopes } from './config'\nimport hash from './hash'\n// import Player from \"./Player\";\nimport './App.css'\nimport NewRow from './NewRow'\n// import Showcase from \"./Showcase\";\n\nclass App extends Component {\n  constructor () {\n    super()\n    this.state = {\n      token: null,\n      item: {\n        album: {\n          images: [{ url: '' }]\n        },\n        name: '',\n        artists: [{ name: '' }],\n        duration_ms: 0\n      },\n      is_playing: 'Paused',\n      progress_ms: 0,\n      newReleases: {\n        items: [{\n          album_type: '',\n          artists: [{\n            name: '',\n            id: '',\n            popularity: 0\n          }],\n          href: '',\n          id: '',\n          images: [{ url: '' }],\n          name: ''\n        }],\n        offset: 0,\n        total: 0\n      },\n      recents: [{\n        track: {\n          album: {\n            name: '',\n            images: [{ url: '' }]\n          },\n          name: '',\n          artists: [{\n            name: '',\n            id: ''\n          }],\n          duration_ms: 0,\n          explicit: false\n        },\n        played_at: ''\n      }],\n      topArtists: {\n        items: [{\n          name: '',\n          popularity: 0,\n          genre: ''\n        }],\n        total: 0,\n        limit: 0\n      },\n      topTracks: {\n        items: [{\n          name: '',\n          album: {\n            artists: [{\n              name: ''\n            }]\n          }\n        }],\n        total: 0,\n        limit: 0\n      }\n    }\n    this.getCurrentlyPlaying = this.getCurrentlyPlaying.bind(this)\n    this.getRecentlyPlayed = this.getRecentlyPlayed.bind(this)\n    this.getMostPlayedArtists = this.getMostPlayedArtists.bind(this)\n    this.getNewReleases = this.getNewReleases.bind(this)\n    this.getMostPlayedTracks = this.getMostPlayedTracks.bind(this)\n  }\n\n  componentDidMount () {\n    // Set token\n    const _token = hash.access_token\n\n    if (_token) {\n      // Set token\n      this.setState({\n        token: _token\n      })\n      // this.getCurrentlyPlaying(_token);\n      this.getRecentlyPlayed(_token)\n      this.getMostPlayedArtists(_token)\n      this.getNewReleases(_token)\n      this.getMostPlayedTracks(_token)\n    }\n  }\n\n  getCurrentlyPlaying (token) {\n    // Make a call using the token\n    $.ajax({\n      url: 'https://api.spotify.com/v1/me/player/currently-playing',\n      type: 'GET',\n      beforeSend: (xhr) => {\n        xhr.setRequestHeader('Authorization', 'Bearer ' + token)\n      },\n      success: (data) => {\n        // console.log('currentData', data)\n        this.setState({\n          item: data.item,\n          is_playing: data.is_playing,\n          progress_ms: data.progress_ms\n        })\n      }\n    })\n  }\n\n  getNewReleases (token) {\n    // Make a call using the token\n    $.ajax({\n      url: 'https://api.spotify.com/v1/browse/new-releases?country=US&limit=50',\n      type: 'GET',\n      beforeSend: (xhr) => {\n        xhr.setRequestHeader('Authorization', 'Bearer ' + token)\n      },\n      success: (data) => {\n        // console.log('newReleases', data)\n        this.setState({\n          newReleases: data.albums,\n        })\n      }\n    })\n  }\n\n/*\n        data.albums.array.forEach(album => {\n          const albumId =\n          this.setState({\n            newArtists.albumId.artistName: album.artists[0].name,\n            newArtists.albumId.artistId: album.artists[0].id,\n            newArtists.albumId.href : album.href,\n            newArtists.albumId.type : album.album_type,\n            newArtists.albumId.name : album.name,\n            newArtists.albumId.imageUrl : album.images[0].url\n            }\n          })\n        });\n*/\n\n  getRecentlyPlayed (token) {\n    // Make a call using the token\n    $.ajax({\n      url: 'https://api.spotify.com/v1/me/player/recently-played',\n      type: 'GET',\n      beforeSend: (xhr) => {\n        xhr.setRequestHeader('Authorization', 'Bearer ' + token)\n      },\n      success: (data) => {\n        // console.log('recentsData', data)\n        this.setState({\n          recents: data.items\n        })\n      }\n    })\n  }\n\n  getMostPlayedArtists (token) {\n    // Make a call using the token\n    $.ajax({\n      url: 'https://api.spotify.com/v1/me/top/artists?time_range=medium_term&limit=50',\n      type: 'GET',\n      beforeSend: (xhr) => {\n        xhr.setRequestHeader('Authorization', 'Bearer ' + token)\n      },\n      success: (data) => {\n        // console.log('mostPlayedArtistsData', data)\n        this.setState({\n          topArtists: data\n        })\n      }\n    })\n  }\n\n  getMostPlayedTracks (token) {\n    // Make a call using the token\n    $.ajax({\n      url: 'https://api.spotify.com/v1/me/top/tracks?time_range=long_term&limit=50',\n      type: 'GET',\n      beforeSend: (xhr) => {\n        xhr.setRequestHeader('Authorization', 'Bearer ' + token)\n      },\n      success: (data) => {\n        // console.log('mostPlayedArtistsData', data)\n        this.setState({\n          topTracks: data\n        })\n      }\n    })\n  }\n\n  /*\n  async getArtistPopularity(token, artistId) {\n    // Make a call using the token\n    console.log($.ajax({\n      url: 'https://api.spotify.com/v1/artists/06HL4z0CvFAxyc27GXpf02',\n      type: 'GET',\n      beforeSend: (xhr) => {\n        xhr.setRequestHeader('Authorization', 'Bearer ' + token)\n      },\n      success: (data) => {\n        console.log(\"Name: \" + data.name, \"Popularity: \" + data.popularity)\n\n        return data.popularity\n      }\n    }))\n  }\n\n  console.log(this.state.newArtists)\n  console.log('1 song: ', this.state.newReleases.items[0])\n  console.log('1 artist: ', this.state.newReleases.items[0].artists[0].id)\n  console.log('popularity: ', getArtistPopularity(this.state.token, this.state.newReleases.items[0].artists[0].id))\n*/\n\n\n  render () {\n\n    console.log(this.state.topTracks);\n\n    const sortByPopularity = array => {\n      const popArray = array.sort((a, b) => {\n        var keyA = a.popularity\n\n        var keyB = b.popularity\n        // Compare the 2 dates\n        if (keyA < keyB) return 1\n        if (keyA > keyB) return -1\n\n        return 0\n      })\n\n      return popArray\n    }\n\n    const getArtistsPopularity = (token, artistId) => {\n      /*\n      try {\n          const response = await fetch('https://api.spotify.com/v1/artists/06HL4z0CvFAxyc27GXpf02', {\n            headers: {\n              Authorization: `Bearer ${token}`\n            },\n          })\n          console.log('Data: ', response.json())\n        } catch(e) {\n          console.log('Error: ', e)\n        }\n        */\n      // /*\n      return fetch('https://api.spotify.com/v1/artists/06HL4z0CvFAxyc27GXpf02', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      })\n        .then(response => {\n          return response.json();\n        })\n        .then(jsonReponse => {\n          return jsonReponse.popularity;\n        })\n        // */\n    }\n\n    const getArtistPopularity = async (token, artistId) => {\n      // Make a call using the token\n      $.ajax({\n        url: 'https://api.spotify.com/v1/artists/06HL4z0CvFAxyc27GXpf02',\n        type: 'GET',\n        beforeSend: (xhr) => {\n          xhr.setRequestHeader('Authorization', 'Bearer ' + token)\n        },\n        success: (data) => {\n          // console.log(\"Name: \" + data.name, \"Popularity: \" + data.popularity)\n\n          return data.popularity\n        }\n      })\n    }\n\n\n\n    // console.log(this.state.newArtists)\n    // console.log('1 song: ', this.state.newReleases.items[0])\n    // console.log('1 artist: ', this.state.newReleases.items[0].artists[0].id)\n    // console.log('popularity: ', getArtistsPopularity(this.state.token, this.state.newReleases.items[0].artists[0].id))\n\n    const sortByType = array => {\n      const r = {\n        singles: [],\n        albums: [],\n        compilations: []\n      }\n      for (let i = 0; i < array.length; i++) {\n        if (array[i].album_type === 'single') {\n          r.singles.push(array[i])\n        } else if (array[i].album_type === 'album') {\n          r.albums.push(array[i])\n        } else {\n          r.compilations.push(array[i])\n        }\n      }\n\n      return r\n    }\n\n    /*\n    const getArtistPopularity = (token, artistId) => {\n      // Make a call using the token\n      console.log($.ajax({\n        url: 'https://api.spotify.com/v1/artists/06HL4z0CvFAxyc27GXpf02',\n        type: 'GET',\n        beforeSend: (xhr) => {\n          xhr.setRequestHeader('Authorization', 'Bearer ' + token)\n        },\n        success: (data) => {\n          console.log(\"Name: \" + data.name, \"Popularity: \" + data.popularity)\n\n          return data.popularity\n        }\n      }))\n    }\n\n    console.log(this.state.newArtists)\n    console.log('1 song: ', this.state.newReleases.items[0])\n    console.log('1 artist: ', this.state.newReleases.items[0].artists[0].id)\n    console.log('popularity: ', getArtistPopularity(this.state.token, this.state.newReleases.items[0].artists[0].id))\n*/\n    let userTopArtists = this.state.topArtists.items\n    let userPopularArtists = this.state.topArtists.items\n    // let userPopularArtists = sortByPopularity(this.state.topArtists.items)\n\n\n    return (\n      <div className=\"overall\">\n        {!this.state.token ? (\n          <div className=\"loggedOut\">\n            <div style={{ height: '40vh' }}/>\n            <a\n              className=\"btn btn--loginApp-link\"\n              href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n              '%20'\n            )}&response_type=token&show_dialog=true`}\n            >\n            Login to Spotify\n            </a>\n          </div>\n        ) : (\n          <div className=\"loggedIn\">\n            <div className=\"newReleases\">\n              <h2>New Releases</h2>\n              <div className=\"split\">\n                <div className=\"newSingles\">\n                  <h3>Singles</h3>\n                  <div className=\"newContent\">\n                    {sortByType(this.state.newReleases.items).singles.map((item) =>\n                      <div className=\"newDrop-block\" key={item.id}>\n                        <div className=\"newDrop-img\">\n                          <img src={item.images[0].url} alt={item.name}/>\n                        </div>\n                        <div className=\"newDrop-info\">\n                          <div className=\"newDrop-name\">{item.name}</div>\n                          <div className=\"newDrop-artist\">{item.artists[0].name}</div>\n                          <div className=\"newDrop-type\">{item.album_type}</div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n                <div className=\"newAlbums\">\n                  <h3>Albums / EPs</h3>\n                  <div className=\"newContent\">\n                    {sortByType(this.state.newReleases.items).albums.map((item) =>\n                      <div className=\"newDrop-block\" key={item.id}>\n                        <div className=\"newDrop-img\">\n                          <img src={item.images[0].url} alt={item.name}/>\n                        </div>\n                        <div className=\"newDrop-info\">\n                          <div className=\"newDrop-name\">{item.name}</div>\n                          <div className=\"newDrop-artist\">{item.artists[0].name}</div>\n                          <div className=\"newDrop-type\">{item.album_type}</div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n              <div>\n                <h2 style={{ paddingTop: 50 }}>Collected</h2>\n                <table style={{ width: '100%' }}>\n                  <thead>\n                    <tr>\n                      <th>Artist</th>\n                      <th>Name</th>\n                      <th>Type</th>\n                      <th>Popularity</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                  {this.state.newReleases.items.map((item) =>\n                    <NewRow key={item.id} item={item} token={this.state.token}/>\n                  )}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n            <div className=\"recents\">\n              <h2>My recently played</h2>\n              {this.state.recents.map((item) => (\n                <div className=\"example\" key={`${item.track.name}_${item.track.artists[0].name}_${item.played_at}`}>\n                  <div className=\"recent-img\">\n                    <img src={item.track.album.images[0].url} alt={item.track.name}/>\n                  </div>\n                  <div className=\"recent-under\">\n                    <div className=\"recent-name\">{item.track.name}</div>\n                    <div className=\"recent-artist\">\n                      {item.track.artists[0].name}\n                    </div>\n                    <div className=\"recent-album\">{item.track.album.name}</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n            <div className=\"myList\">\n              <div style={{ width: 400, marginLeft: 'auto', marginRight: 'auto' }}>\n                <h2>My most listened:</h2>\n                <ol>\n                  {userTopArtists.map((item) => (\n                    <li key={item.name}>\n                      {`${item.name}: ${item.popularity}`}\n                    </li>\n                  ))}\n                </ol>\n                {/*\n                <br/>\n                <h2>By global popularity:</h2>\n                <ol>\n                  {userPopularArtists.map(item => (\n                    <li key={item.name}>\n                      {`${item.name}: ${item.popularity}`}\n                    </li>\n                  ))}\n                  </ol> */ }\n              </div>\n            </div>\n            <div className=\"myList\">\n              <div style={{ width: 400, marginLeft: 'auto', marginRight: 'auto' }}>\n                <h2>My top tracks:</h2>\n                <ol>\n                  {this.state.topTracks.items.map((item) => (\n                    <li key={item.name}>\n                      {`${item.album.artists[0].name} - ${item.name}`}\n                    </li>\n                  ))}\n                </ol>\n              </div>\n            </div>\n          </div>\n        )}\n\n      </div>\n\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n/*\n{\n  \"albums\" : {\n    \"href\" : \"https://api.spotify.com/v1/browse/new-releases?country=SE&offset=0&limit=20\",\n    \"items\" : [ {\n      \"album_type\" : \"single\",\n      \"artists\" : [ {\n        \"external_urls\" : {\n          \"spotify\" : \"https://open.spotify.com/artist/2RdwBSPQiwcmiDo9kixcl8\"\n        },\n        \"href\" : \"https://api.spotify.com/v1/artists/2RdwBSPQiwcmiDo9kixcl8\",\n        \"id\" : \"2RdwBSPQiwcmiDo9kixcl8\",\n        \"name\" : \"Pharrell Williams\",\n        \"type\" : \"artist\",\n        \"uri\" : \"spotify:artist:2RdwBSPQiwcmiDo9kixcl8\"\n      } ],\n      \"available_markets\" : [ \"AD\", \"AR\", \"AT\", \"AU\", \"BE\", \"BG\", \"BO\", \"BR\", \"CA\", \"CH\", \"CL\", \"CO\", \"CR\", \"CY\", \"CZ\", \"DE\", \"DK\", \"DO\", \"EC\", \"EE\", \"ES\", \"FI\", \"FR\", \"GB\", \"GR\", \"GT\", \"HK\", \"HN\", \"HU\", \"ID\", \"IE\", \"IS\", \"IT\", \"JP\", \"LI\", \"LT\", \"LU\", \"LV\", \"MC\", \"MT\", \"MX\", \"MY\", \"NI\", \"NL\", \"NO\", \"NZ\", \"PA\", \"PE\", \"PH\", \"PL\", \"PT\", \"PY\", \"SE\", \"SG\", \"SK\", \"SV\", \"TR\", \"TW\", \"US\", \"UY\" ],\n      \"external_urls\" : {\n        \"spotify\" : \"https://open.spotify.com/album/5ZX4m5aVSmWQ5iHAPQpT71\"\n      },\n      \"href\" : \"https://api.spotify.com/v1/albums/5ZX4m5aVSmWQ5iHAPQpT71\",\n      \"id\" : \"5ZX4m5aVSmWQ5iHAPQpT71\",\n      \"images\" : [ {\n        \"height\" : 640,\n        \"url\" : \"https://i.scdn.co/image/e6b635ebe3ef4ba22492f5698a7b5d417f78b88a\",\n        \"width\" : 640\n      }, {\n        \"height\" : 300,\n        \"url\" : \"https://i.scdn.co/image/92ae5b0fe64870c09004dd2e745a4fb1bf7de39d\",\n        \"width\" : 300\n      }, {\n        \"height\" : 64,\n        \"url\" : \"https://i.scdn.co/image/8a7ab6fc2c9f678308ba0f694ecd5718dc6bc930\",\n        \"width\" : 64\n      } ],\n      \"name\" : \"Runnin'\",\n      \"type\" : \"album\",\n      \"uri\" : \"spotify:album:5ZX4m5aVSmWQ5iHAPQpT71\"\n    }, {\n      \"album_type\" : \"single\",\n      \"artists\" : [ {\n        \"external_urls\" : {\n          \"spotify\" : \"https://open.spotify.com/artist/3TVXtAsR1Inumwj472S9r4\"\n        },\n        \"href\" : \"https://api.spotify.com/v1/artists/3TVXtAsR1Inumwj472S9r4\",\n        \"id\" : \"3TVXtAsR1Inumwj472S9r4\",\n        \"name\" : \"Drake\",\n        \"type\" : \"artist\",\n        \"uri\" : \"spotify:artist:3TVXtAsR1Inumwj472S9r4\"\n      } ],\n      \"available_markets\" : [ \"AD\", \"AR\", \"AT\", \"AU\", \"BE\", \"BG\", \"BO\", \"BR\", \"CH\", \"CL\", \"CO\", \"CR\", \"CY\", \"CZ\", \"DE\", \"DK\", \"DO\", \"EC\", \"EE\", \"ES\", \"FI\", \"FR\", \"GB\", \"GR\", \"GT\", \"HK\", \"HN\", \"HU\", \"ID\", \"IE\", \"IS\", \"IT\", \"JP\", \"LI\", \"LT\", \"LU\", \"LV\", \"MC\", \"MT\", \"MY\", \"NI\", \"NL\", \"NO\", \"NZ\", \"PA\", \"PE\", \"PH\", \"PL\", \"PT\", \"PY\", \"SE\", \"SG\", \"SK\", \"SV\", \"TR\", \"TW\", \"UY\" ],\n      \"external_urls\" : {\n        \"spotify\" : \"https://open.spotify.com/album/0geTzdk2InlqIoB16fW9Nd\"\n      },\n      \"href\" : \"https://api.spotify.com/v1/albums/0geTzdk2InlqIoB16fW9Nd\",\n      \"id\" : \"0geTzdk2InlqIoB16fW9Nd\",\n      \"images\" : [ {\n        \"height\" : 640,\n        \"url\" : \"https://i.scdn.co/image/d40e9c3d22bde2fbdb2ecc03cccd7a0e77f42e4c\",\n        \"width\" : 640\n      }, {\n        \"height\" : 300,\n        \"url\" : \"https://i.scdn.co/image/dff06a3375f6d9b32ecb081eb9a60bbafecb5731\",\n        \"width\" : 300\n      }, {\n        \"height\" : 64,\n        \"url\" : \"https://i.scdn.co/image/808a02bd7fc59b0652c9df9f68675edbffe07a79\",\n        \"width\" : 64\n      } ],\n      \"name\" : \"Sneakin’\",\n      \"type\" : \"album\",\n      \"uri\" : \"spotify:album:0geTzdk2InlqIoB16fW9Nd\"\n    }, {\n    ...\n    } ],\n    \"limit\" : 20,\n    \"next\" : \"https://api.spotify.com/v1/browse/new-releases?country=SE&offset=20&limit=20\",\n    \"offset\" : 0,\n    \"previous\" : null,\n    \"total\" : 500\n  }\n}\n*/"],"sourceRoot":""}